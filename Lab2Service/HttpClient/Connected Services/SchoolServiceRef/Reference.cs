//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchoolServiceRef
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="PersonList", Namespace="http://schemas.datacontract.org/2004/07/Lab2Service", ItemName="Person")]
    public class PersonList : System.Collections.Generic.List<Lab2Service.Person>
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SchoolServiceRef.ISchoolService")]
    public interface ISchoolService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/AddStudent", ReplyAction="http://tempuri.org/ISchoolService/AddStudentResponse")]
        System.Threading.Tasks.Task<Lab2Service.Student> AddStudentAsync(string id, string lastName, string firstName, System.DateTime dob, Lab2Service.GenderEnum gender, string major, float units, float gpa);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/DeleteStudent", ReplyAction="http://tempuri.org/ISchoolService/DeleteStudentResponse")]
        System.Threading.Tasks.Task DeleteStudentAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetStudent", ReplyAction="http://tempuri.org/ISchoolService/GetStudentResponse")]
        System.Threading.Tasks.Task<Lab2Service.Student> GetStudentAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetStudents", ReplyAction="http://tempuri.org/ISchoolService/GetStudentsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Lab2Service.Student>> GetStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/UpdateStudent", ReplyAction="http://tempuri.org/ISchoolService/UpdateStudentResponse")]
        System.Threading.Tasks.Task<Lab2Service.Student> UpdateStudentAsync(string id, string lastName, string firstName, System.DateTime dob, Lab2Service.GenderEnum gender, string major, float units, float gpa);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/AddTeacher", ReplyAction="http://tempuri.org/ISchoolService/AddTeacherResponse")]
        System.Threading.Tasks.Task<Lab2Service.Teacher> AddTeacherAsync(int ID, string lastName, string firstName, System.DateTime dob, Lab2Service.GenderEnum gender, System.DateTime dateOfHire, int salary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/DeleteTeacher", ReplyAction="http://tempuri.org/ISchoolService/DeleteTeacherResponse")]
        System.Threading.Tasks.Task DeleteTeacherAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetTeacher", ReplyAction="http://tempuri.org/ISchoolService/GetTeacherResponse")]
        System.Threading.Tasks.Task<Lab2Service.Teacher> GetTeacherAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetTeachers", ReplyAction="http://tempuri.org/ISchoolService/GetTeachersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Lab2Service.Teacher>> GetTeachersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/UpdateTeacher", ReplyAction="http://tempuri.org/ISchoolService/UpdateTeacherResponse")]
        System.Threading.Tasks.Task<Lab2Service.Teacher> UpdateTeacherAsync(int ID, string lastName, string firstName, System.DateTime dob, Lab2Service.GenderEnum gender, System.DateTime dateOfHire, int salary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetPeople", ReplyAction="http://tempuri.org/ISchoolService/GetPeopleResponse")]
        System.Threading.Tasks.Task<SchoolServiceRef.PersonList> GetPeopleAsync(string lastName, string firstName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ISchoolServiceChannel : SchoolServiceRef.ISchoolService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class SchoolServiceClient : System.ServiceModel.ClientBase<SchoolServiceRef.ISchoolService>, SchoolServiceRef.ISchoolService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SchoolServiceClient() : 
                base(SchoolServiceClient.GetDefaultBinding(), SchoolServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ISchoolService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SchoolServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(SchoolServiceClient.GetBindingForEndpoint(endpointConfiguration), SchoolServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SchoolServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SchoolServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SchoolServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SchoolServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SchoolServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<Lab2Service.Student> AddStudentAsync(string id, string lastName, string firstName, System.DateTime dob, Lab2Service.GenderEnum gender, string major, float units, float gpa)
        {
            return base.Channel.AddStudentAsync(id, lastName, firstName, dob, gender, major, units, gpa);
        }
        
        public System.Threading.Tasks.Task DeleteStudentAsync(string id)
        {
            return base.Channel.DeleteStudentAsync(id);
        }
        
        public System.Threading.Tasks.Task<Lab2Service.Student> GetStudentAsync(string id)
        {
            return base.Channel.GetStudentAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Lab2Service.Student>> GetStudentsAsync()
        {
            return base.Channel.GetStudentsAsync();
        }
        
        public System.Threading.Tasks.Task<Lab2Service.Student> UpdateStudentAsync(string id, string lastName, string firstName, System.DateTime dob, Lab2Service.GenderEnum gender, string major, float units, float gpa)
        {
            return base.Channel.UpdateStudentAsync(id, lastName, firstName, dob, gender, major, units, gpa);
        }
        
        public System.Threading.Tasks.Task<Lab2Service.Teacher> AddTeacherAsync(int ID, string lastName, string firstName, System.DateTime dob, Lab2Service.GenderEnum gender, System.DateTime dateOfHire, int salary)
        {
            return base.Channel.AddTeacherAsync(ID, lastName, firstName, dob, gender, dateOfHire, salary);
        }
        
        public System.Threading.Tasks.Task DeleteTeacherAsync(int id)
        {
            return base.Channel.DeleteTeacherAsync(id);
        }
        
        public System.Threading.Tasks.Task<Lab2Service.Teacher> GetTeacherAsync(int id)
        {
            return base.Channel.GetTeacherAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Lab2Service.Teacher>> GetTeachersAsync()
        {
            return base.Channel.GetTeachersAsync();
        }
        
        public System.Threading.Tasks.Task<Lab2Service.Teacher> UpdateTeacherAsync(int ID, string lastName, string firstName, System.DateTime dob, Lab2Service.GenderEnum gender, System.DateTime dateOfHire, int salary)
        {
            return base.Channel.UpdateTeacherAsync(ID, lastName, firstName, dob, gender, dateOfHire, salary);
        }
        
        public System.Threading.Tasks.Task<SchoolServiceRef.PersonList> GetPeopleAsync(string lastName, string firstName)
        {
            return base.Channel.GetPeopleAsync(lastName, firstName);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISchoolService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISchoolService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:1302/SchoolService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return SchoolServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ISchoolService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return SchoolServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ISchoolService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ISchoolService,
        }
    }
}
